server:
  port: 8088


#mybatis.config-location=classpath:mybatis-config.xml
#mybatis mapper文件的位置
#扫描pojo类的位置,在此处指明扫描实体类的包，在mapper中就可以不用写pojo类的全路径名了
mybatis:
  mapper-locations: classpath:mapper/*.xml

spring:
#  datasource:
#    url: jdbc:mysql://localhost:3306/user2
#    username: root
#    password: root
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    druid:
#      initial-size: 8 #初始化连接大小
#      max-active: 10 #最大连接数
#      min-idle: 5 #最小空闲连接数
#      transaction-query-timeout: 60000 #事务查询超时时间
#      pool-prepared-statements: true  #打开PSCache
#      max-pool-prepared-statement-per-connection-size: 20 #指定每个连接上PSCache的大小
#      min-evictable-idle-time-millis: 300000  #一个连接在池中最小生存的时间(ms)
#      max-wait: 60000 #获取连接时最大等待时间，单位毫秒。
#      time-between-log-stats-millis: 60000  #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#      remove-abandoned: true  #超过时间限制是否回收
#      remove-abandoned-timeout: 180 #关闭空闲连接超时时间
#      log-abandoned: true

  main:
    allow-bean-definition-overriding : true

redis:
  host: 127.0.0.1
  port: 6379

logging:
  level:
    com.mapper : debug

sharding:
  jdbc:
    datasource:
      names: ds0,ds1,ds2,ds3
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user
        username: root
        password: root
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user1
        username: root
        password: root
      ds2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user2
        username: root
        password: root
      ds3:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user3
        username: root
        password: root
    config:
      sharding:
        props:
          sql.show: true
        tables:
          t_user:  #t_user表
            key-generator-column-name: id  #主键
            actual-data-nodes: ds${0..3}.t_user${0..1}  #数据节点
            database-strategy:  #分库策略
              inline:
                sharding-column: id
                algorithm-expression: ds${id % 4}
            table-strategy:  #分表策略
              inline:
                shardingColumn: sex
                algorithm-expression: t_user${sex % 2}

          t_order_2:
            #key-generator-column-name: id  #主键
              actual-data-nodes: ds2.t_order_2  #数据节点
              database-strategy:  #分库策略
                inline:
                  sharding-column: id
                  algorithm-expression: ds2
              table-strategy:  #分表策略
                inline:
                  shardingColumn: sex
                  algorithm-expression: t_order_2

